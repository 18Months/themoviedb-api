---
http_interactions:
- request:
    method: get
    uri: http://api.themoviedb.org/3/movie/550/reviews?api_key=c29379565234e20d7cbf4f2e835c3e41&language=en
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      User-Agent:
      - rest-client/2.1.0 (darwin21 x86_64) ruby/2.7.7p221
      Content-Type:
      - application/json; charset=utf-8
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - api.themoviedb.org
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json;charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Date:
      - Sat, 26 Nov 2022 18:52:55 GMT
      Server:
      - openresty
      Cache-Control:
      - public, max-age=28800
      X-Memc:
      - HIT
      X-Memc-Key:
      - de16b58605931cbd16cb19aff593d719dd343133
      X-Memc-Age:
      - '2457'
      X-Memc-Expires:
      - '12911'
      Etag:
      - W/"1bdf7fa354e9f086dd3d44c59e5252f7"
      Vary:
      - Accept-Encoding,Accept-Encoding,Accept-Encoding
      - Origin
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 fc61721a57535e7448c6b6e00cc44494.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - MAD53-P2
      Alt-Svc:
      - h3=":443"; ma=86400
      X-Amz-Cf-Id:
      - r7xLuCRmer93MVk-s2timc_g-NjPILbwvN3v6ay-uSM-DovA2sl_eQ==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Sat, 26 Nov 2022 18:52:55 GMT
recorded_with: VCR 6.1.0
